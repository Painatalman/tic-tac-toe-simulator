import type { NextPage } from "next";
import Head from "next/head";
import { Button, Container, Progress, Text, Spacer } from "@nextui-org/react";
import TicTacToe from "../src/components/TicTacToe/partials/PlayList";

import React, { useState } from "react";
import { TicTacToeResults } from "../src/TicTacToe/types";
import createApiService from "@utils/createApiService";

const service = createApiService();

type Props = { initialResults: TicTacToeResults | null };

const Home: NextPage<Props> = ({ initialResults = null }: Props) => {
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [gameData, setGameData] = useState<TicTacToeResults | null>(
    initialResults
  );

  return (
    <>
      <Head>
        <title>Tic-Tac-Toe Simulator</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container justify="center" alignContent="center">
        <Text
          h1={true}
          size={48}
          css={{
            textGradient: "45deg, $blue500 -20%, $red500 50%",
          }}
          weight="bold"
        >
          Tic-Tac-Toe Simulator
        </Text>
        <Text>
          A <em>random</em> simulation of a Tic-Tac-Toe!
        </Text>
        <Spacer y={1} />
        <main>
          <Button
            color="gradient"
            onClick={() => {
              if (isLoading) return;
              //reset state
              setIsLoading(true);
              setGameData(null);

              service.getRandomGame().then((data) => {
                setGameData(data);
                setIsLoading(false);
              });
            }}
          >
            Simulate
          </Button>
          {isLoading ? (
            <Progress
              indeterminated
              value={50}
              color="secondary"
              status="secondary"
            ></Progress>
          ) : !gameData ? (
            <Text>Press Simulate to play!</Text>
          ) : (
            <TicTacToe winner={gameData.winner} plays={gameData.plays} />
          )}
        </main>
      </Container>
    </>
  );
};

export async function getServerSideProps() {
  const data = await service.getRandomGame();

  return {
    props: {
      initialResults: data,
    },
  };
}

export default Home;
